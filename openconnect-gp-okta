#!/usr/bin/env python3

import base64
import click
import configparser
import json
import lxml.etree
import os
import re
import requests
import shlex
import ssl
import subprocess
import sys
import tempfile
import urllib

try:
    import pyotp
except ImportError:
    pyotp = None

HAS_FIDO2 = True
try:
    from fido2.client import Fido2Client, UserInteraction
    from fido2.hid import list_devices
    from fido2.utils import websafe_decode, websafe_encode
except ImportError:
    HAS_FIDO2 = False
    UserInteraction = object


clientos_to_openconnect = {
    'Linux': 'linux-64',
    'Mac': 'mac-intel',
    'Windows': 'win',
}


class ConsoleInteraction(UserInteraction):
    def prompt_up(self):
        """Called when the authenticator is awaiting a user presence check."""
        click.echo("Touch your hardware token to confirm user presence")

    def request_pin(self, permissions, rp_id):
        """Called when the client requires a PIN from the user.
        Should return a PIN, or None/Empty to cancel."""
        return click.prompt("Enter your hardware token pin", hide_input=True)

    def request_uv(self, permissions, rp_id):
        """Called when the client is about to request UV from the user.
        Should return True if allowed, or False to cancel."""
        click.echo("User Verification requested.")
        return True


class OktaWebauthn:
    # Not using factor['_links']['verify']['href'] as multiple
    # webauthn devices may exist and Okta has an alternative
    # workflow which works with any webauthn device available by
    # querying a generic URL.
    WEBAUTHN_URL_TEMPLATE = 'https://{}/api/v1/authn/factors/webauthn/verify'

    def __init__(self):
        assert HAS_FIDO2
        self._device = None

    def get_device(self):
        self._device = next(list_devices(), None)
        while self._device is None:
            click.echo("Please insert a suitable device if you wish to continue with webauthn MFA.")
            if click.confirm("Continue with webauthn MFA?"):
                self._device = next(list_devices(), None)
            else:
                click.echo("Falling back to other MFA method.")
                break
        return self._device is not None

    def okta_verify(self, session, domain, stateToken):
        url = self.WEBAUTHN_URL_TEMPLATE.format(domain)
        r = post_json(session, url, {'stateToken': stateToken})
        assert r['status'] == 'MFA_CHALLENGE'

        fido_client = Fido2Client(
            self._device,
            "https://{}".format(domain),
            user_interaction=ConsoleInteraction(),
        )
        pubkey_req = {
            "challenge": websafe_decode(r['_embedded']['challenge']['challenge']),
            "rpId": domain,
            'allowCredentials': [
                {
                    'type': 'public-key',
                    'id': websafe_decode(f['profile']['credentialId'])
                } for f in r['_embedded']['factors']
            ]
        }

        assertion = fido_client.get_assertion(pubkey_req).get_response(0)

        def b64(obj):
            # websafe_encode(obj) takes a python object and serializes it using
            # methods defined by this given object so that (obj !=
            # websafe_decode(websafe_encode(obj))). The latter is a bytestring
            # that then needs to be correctly base64 encoded for Okta.
            return base64.b64encode(websafe_decode(websafe_encode(obj))).decode('ascii')

        next_url = r['_links']['next']['href']
        payload = {
            'authenticatorData': b64(assertion['authenticatorData']),
            'clientData': b64(assertion['clientData']),
            'signatureData': b64(assertion['signature']),
            'stateToken': r["stateToken"]
        }
        return post_json(session, next_url, payload)


def check(r):
    r.raise_for_status()
    return r


def extract_form(html):
    form = lxml.etree.fromstring(html, lxml.etree.HTMLParser()).find('.//form')
    return (
        form.attrib['action'],
        {inp.attrib['name']: inp.attrib['value'] for inp in form.findall('input')})


def prelogin(s, gateway, clientos, interface):
    if2prelogin = {'portal': 'global-protect/prelogin.esp', 'gateway': 'ssl-vpn/prelogin.esp'}
    data = {'tmp': 'tmp', 'kerberos-support': 'yes', 'ipv6-support': 'yes', 'clientVer': 4100, 'clientos': clientos}
    r = check(s.post(f'https://{gateway}/{if2prelogin[interface]}', data=data))
    saml_req_html = base64.b64decode(lxml.etree.fromstring(r.content).find('saml-request').text)
    saml_req_url, saml_req_data = extract_form(saml_req_html)
    assert 'SAMLRequest' in saml_req_data
    return saml_req_url + '?' + urllib.parse.urlencode(saml_req_data)


def post_json(s, url, data):
    r = check(s.post(
        url, data=json.dumps(data),
        headers={'Content-Type': 'application/json'}))
    return r.json()


def okta_auth(s, domain, username, password, factor_priorities, totp_code_gen):
    r = post_json(
        s, 'https://{}/api/v1/authn'.format(domain),
        {'username': username, 'password': password})

    if r['status'] == 'MFA_REQUIRED':
        def priority(factor):
            return factor_priorities.get(factor['factorType'], 0)

        ignore_webauthn = not HAS_FIDO2
        for factor in sorted(r['_embedded']['factors'], key=priority, reverse=True):
            if factor['factorType'] == 'push':
                url = factor['_links']['verify']['href']
                correct_answer = None
                while True:
                    r = post_json(s, url, {'stateToken': r['stateToken']})
                    if r['status'] != 'MFA_CHALLENGE':
                        break
                    assert r['factorResult'] == 'WAITING'
                    if correct_answer is None:
                        try:
                            correct_answer = r["_embedded"]["factor"]["_embedded"]["challenge"]["correctAnswer"]
                            click.echo(f"Correct 3-number answer is: {correct_answer}")
                        except KeyError:
                            pass
                break
            if factor['factorType'] == 'sms':
                url = factor['_links']['verify']['href']
                r = post_json(s, url, {'stateToken': r['stateToken']})
                assert r['status'] == 'MFA_CHALLENGE'
                code = click.prompt('SMS code')
                r = post_json(s, url, {'stateToken': r['stateToken'], 'passCode': code})
                break
            if factor['factorType'] == 'webauthn' and not ignore_webauthn:
                webauthn = OktaWebauthn()
                if webauthn.get_device():
                    r = webauthn.okta_verify(s, domain, r['stateToken'])
                else:
                    ignore_webauthn = True
                    continue
                break
            if re.match('token(?::|$)', factor['factorType']):
                url = factor['_links']['verify']['href']
                if factor['factorType'] == 'token:software:totp' and totp_code_gen is not None:
                    code = totp_code_gen()
                else:
                    code = click.prompt('One-time code for {} ({})'.format(factor['provider'], factor['vendorName']))
                r = post_json(s, url, {'stateToken': r['stateToken'], 'passCode': code})
                break
        else:
            raise Exception('No supported authentication factors')

    if r['status'] == 'LOCKED_OUT':
        raise Exception('Locked out of Okta!')
    assert r['status'] == 'SUCCESS'
    return r['sessionToken']


def okta_saml(s, saml_req_url, username, password, factor_priorities, totp_code_gen):
    domain = urllib.parse.urlparse(saml_req_url).netloc

    # Just to set DT cookie
    check(s.get(saml_req_url))

    token = okta_auth(s, domain, username, password, factor_priorities, totp_code_gen)

    r = check(s.get(
        'https://{}/login/sessionCookieRedirect'.format(domain),
        params={'token': token, 'redirectUrl': saml_req_url}))
    saml_resp_url, saml_resp_data = extract_form(r.content)
    assert 'SAMLResponse' in saml_resp_data
    return saml_resp_url, saml_resp_data


def complete_saml(s, saml_resp_url, saml_resp_data):
    r = check(s.post(saml_resp_url, data=saml_resp_data))
    if 'prelogin-cookie' in r.headers:
        return r.headers['saml-username'], 'prelogin-cookie', r.headers['prelogin-cookie']
    elif 'portal-userauthcookie' in r.headers:
        return r.headers['saml-username'], 'portal-userauthcookie', r.headers['portal-userauthcookie']
    else:
        raise Exception(f'Expected prelogin-cookie or portal-userauthcookie in {r.headers}')


def eval_cmd(cmd, description):
    out = subprocess.run(shlex.split(cmd), capture_output=True, text=True)
    output = out.stdout.splitlines()
    if out.returncode != 0 or len(output) == 0:
        click.echo(f"{description} command failed with return status {out.returncode}:", err=True)
        click.echo(out.stderr, nl=False, err=True)
        sys.exit(1)
    else:
        if len(output) > 1:
            click.echo(
                f"{description} command produced more than"
                "one line of output, using the first one"
            )
        return out.stdout.splitlines()[0]


class TLSAdapter(requests.adapters.HTTPAdapter):
    def init_poolmanager(self, *args, **kwargs):
        ctx = ssl.create_default_context()
        ctx.options |= 1 << 2  # OP_LEGACY_SERVER_CONNECT
        kwargs['ssl_context'] = ctx
        return super(TLSAdapter, self).init_poolmanager(*args, **kwargs)


@click.command()
@click.argument('gateway', required=False)
@click.argument('openconnect-args', nargs=-1)
@click.option('--config', default="")
@click.option('--username')
@click.option('--password')
@click.option('--password-cmd')
@click.option('--factor-priority', 'factor_priorities', nargs=2, type=click.Tuple((str, int)), multiple=True)
@click.option('--totp-key')
@click.option('--totp-cmd')
@click.option('--sudo/--no-sudo', default=False)
@click.option('--pkexec/--no-pkexec', default=False)
@click.option('--allow-insecure-crypto/--no-allow-insecure-crypto', default=False)
@click.option('--user-agent')
@click.option('--client-os', type=click.Choice(clientos_to_openconnect.keys()), default='Windows')
@click.option('--gateway', 'interface', flag_value='gateway', default=True)
@click.option('--portal', 'interface', flag_value='portal')
def main(
    gateway,
    openconnect_args,
    config,
    username,
    password,
    password_cmd,
    factor_priorities,
    totp_key,
    totp_cmd,
    sudo,
    pkexec,
    allow_insecure_crypto,
    user_agent,
    client_os,
    interface,
):
    args = {k: v for k, v in locals().items() if v is not None}

    conf = configparser.ConfigParser()
    conf.optionxform = lambda opt: opt.replace('_', '-')
    conf.read(config)

    gateway = conf.get('common', 'gateway', vars=args, fallback=gateway)
    openconnect_args += tuple(shlex.split(conf.get('common', 'openconnect-args', fallback="")))
    username = conf.get('common', 'username', vars=args, fallback=username)
    password = conf.get('common', 'password', vars=args, fallback=password)
    password_cmd = conf.get('common', 'password-cmd', vars=args, fallback=password_cmd)
    totp_key = conf.get('common', 'totp-key', vars=args, fallback=totp_key)
    totp_cmd = conf.get('common', 'totp-cmd', vars=args, fallback=totp_cmd)
    sudo = conf.get('common', 'sudo', vars=args, fallback=sudo)
    pkexec = conf.get('common', 'pkexec', vars=args, fallback=pkexec)
    allow_insecure_crypto = conf.get('common', 'allow_insecure_crypto', vars=args, fallback=allow_insecure_crypto)
    user_agent = conf.get('common', 'user_agent', vars=args, fallback=user_agent)
    client_os = conf.get('common', 'client_os', vars=args, fallback=client_os)
    interface = conf.get('common', 'interface', vars=args, fallback=interface)

    if conf.has_section('factor-priority'):
        factor_priorities += tuple(
            map(
                lambda x: (x[0], int(x[1])),
                conf.items('factor-priority')
            )
        )

    totp_code_gen = None
    if totp_cmd is not None:
        totp_code_gen = lambda: eval_cmd(totp_cmd, 'TOTP code')  # noqa: E731
    if totp_key is not None:
        if pyotp is None:
            click.echo('--totp-key requires pyotp!', err=True)
            sys.exit(1)
        totp_code_gen = lambda: pyotp.TOTP(totp_key).now()  # noqa: E731

    if gateway is None:
        click.echo('No gateway provided', err=True)
        sys.exit(1)

    if username is None:
        username = click.prompt('Username')
    if password_cmd is not None:
        password = eval_cmd(password_cmd, 'Password')
    if password is None:
        password = click.prompt('Password', hide_input=True)

    factor_priorities = {
        'token:software:totp': 0 if totp_key is None else 2,
        'push': 1,
        **dict(factor_priorities)}

    with requests.Session() as s:
        s.headers['User-Agent'] = 'PAN GlobalProtect' if user_agent is None else user_agent
        if allow_insecure_crypto:
            s.mount('https://', TLSAdapter())
        saml_req_url = prelogin(s, gateway, client_os, interface)
        saml_resp_url, saml_resp_data = okta_saml(s, saml_req_url, username, password, factor_priorities, totp_code_gen)
        saml_username, cookie_name, cookie_value = complete_saml(s, saml_resp_url, saml_resp_data)

    cmd = [
        'openconnect',
        gateway,
        '--protocol=gp',
        '--os=' + clientos_to_openconnect[client_os],
        '--user=' + saml_username,
        '--usergroup=' + interface + ':' + cookie_name,
        '--passwd-on-stdin'
    ]
    if allow_insecure_crypto:
        cmd.append("--allow-insecure-crypto")
    cmd.extend(openconnect_args)
    if sudo:
        cmd = ['sudo'] + cmd
    if pkexec:
        cmd = ['pkexec', '--user', 'root'] + cmd

    print(f"Launching {' '.join(map(shlex.quote, cmd))} <<<{shlex.quote(cookie_value)}")
    with tempfile.TemporaryFile('w+') as tf:
        tf.write(cookie_value)
        tf.flush()
        tf.seek(0)
        # redirect stdin from this file, before it is closed by the context manager
        # (it will remain accessible via the open file descriptor)
        os.dup2(tf.fileno(), 0)
    os.execvp(cmd[0], cmd)


main()
